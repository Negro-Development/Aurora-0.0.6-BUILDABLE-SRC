// Decompiled with CFR 0.152
// Recompile with -Xlint for deprecapted features
package me.halqq.aurora.client.impl.modules.exploits

import me.halqq.aurora.client.api.module.Category
import me.halqq.aurora.client.api.module.Module
import net.minecraft.entity.EntityLivingBase

class TickShift : Module("TickShift", Category.EXPLOITS) {
    var disable = create("Disable", true)


    var disableTicks = create("DisableTicks", 26, 1, 100)

    var movementEnable = create("MovementEnable", true)

    var enableTicks = create("EnableTicks", 30, 1, 100)

    var multiplier = create("Multiplier", 3.0, 1.0, 10.0)
    private var ticksPassed = 0
    private var ticksStill = 0
    private val playerMoving = false
    private var timerOn = false

    override fun onUpdate() {
        if (timerOn == false) {
            if (isMoving(mc.player)) {
                if (ticksStill >= 1) {
                    ticksStill--
                }
            } else if (!isMoving(mc.player)) {
                ticksStill++
            }
        }


        if (ticksStill >= enableTicks.value) {
            timerOn = true
            if (movementEnable.value) {
                if (mc.gameSettings.keyBindJump.isKeyDown || mc.gameSettings.keyBindSneak.isKeyDown || mc.gameSettings.keyBindRight.isKeyDown || mc.gameSettings.keyBindLeft.isKeyDown || mc.gameSettings.keyBindForward.isKeyDown || mc.gameSettings.keyBindBack.isKeyDown) {
                    mc.timer.tickLength = (50.0 / multiplier.value).toFloat()
                    ticksPassed++
                }
            } else {
                mc.timer.tickLength = (50.0 / multiplier.value).toFloat()
                ticksPassed++
            }
        }

        if (ticksPassed >= disableTicks.value) {
            ticksPassed = 0
            if (disable.value) {
                toggle()
            } else {
                reset()
            }
        }
    }

    override fun onDisable() {
        timerOn = false
        ticksStill = 0
        mc.timer.tickLength = 50f
    }

    fun reset() {
        timerOn = false
        ticksStill = 0
        mc.timer.tickLength = 50f
    }

    companion object {
        fun isMoving(entity: EntityLivingBase): Boolean {
            return entity.moveForward != 0f || entity.moveStrafing != 0f
        }
    }
}